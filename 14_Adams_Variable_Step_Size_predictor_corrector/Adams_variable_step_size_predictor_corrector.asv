% Adams Değişken Adım Boyutlu Predictor-Corrector Yöntemi
clc;
clear;

% Diferansiyel denklem: y' = y - t^2 + 1
f = @(t, y) y - t^2 + 1;

% Başlangıç koşulları
t0 = 0;       % Başlangıç zamanı
y0 = 0.5;     % Başlangıç değeri
tol = 1e-5;   % Tolerans seviyesi (hata kontrolü için)

% Başlangıç adım boyutu
h = 0.;

% Çözüm için dizi başlat
t = t0;
y = y0;

% Runge-Kutta ile ilk birkaç adımı hesapla
for i = 1:3
    k1 = f(t(end), y(end));
    k2 = f(t(end) + h/2, y(end) + h*k1/2);
    k3 = f(t(end) + h/2, y(end) + h*k2/2);
    k4 = f(t(end) + h, y(end) + h*k3);
    y_next = y(end) + h*(k1 + 2*k2 + 2*k3 + k4)/6;
    t_next = t(end) + h;
    
    t = [t, t_next];  % Zaman değerlerini güncelle
    y = [y, y_next];  % Çözüm değerlerini güncelle
end

% Adams değişken adım boyutlu Predictor-Corrector yöntemi
while t(end) < 1  % Zaman aralığının sonuna kadar devam et
    % Predictor adımı (Adams-Bashforth 4. derece)
    y_pred = y(end) + h/24 * (55*f(t(end), y(end)) - 59*f(t(end-1), y(end-1)) + ...
                              37*f(t(end-2), y(end-2)) - 9*f(t(end-3), y(end-3)));
    
    % Corrector adımı (Adams-Moulton 4. derece)
    y_corr = y(end) + h/24 * (9*f(t(end) + h, y_pred) + 19*f(t(end), y(end)) - ...
                              5*f(t(end-1), y(end-1)) + f(t(end-2), y(end-2)));
    
    % Hata kontrolü
    error = abs(y_corr - y_pred);
    if error > tol
        % Hata toleransı aşılırsa adım boyutunu küçült
        h = h / 2;
    elseif error < tol / 10
        % Hata çok küçükse adım boyutunu büyüt
        h = min(h * 2, 0.1);  % Maksimum adım boyutunu sınırlıyoruz
    else
        % Hata kabul edilebilir seviyedeyse devam et
        t_next = t(end) + h;
        t = [t, t_next];      % Zaman değerlerini güncelle
        y = [y, y_corr];      % Çözüm değerlerini güncelle
    end
end

% Sonuçları göster
results = table(t', y', 'VariableNames', {'Zaman', 'Çözüm'});
disp(results);

% Çözümün grafiği
plot(t, y, '-o');
title('Adams Değişken Adım Boyutlu Predictor-Corrector ile ODE Çözümü');
xlabel('t');
ylabel('y(t)');
grid on;
